[{"O:\\nopsTest\\nops-task\\src\\index.js":"1","O:\\nopsTest\\nops-task\\src\\App.js":"2","O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js":"3","O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js":"4","O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js":"5","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js":"6","O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js":"7","O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js":"8","O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js":"9","O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js":"10","O:\\nopsTest\\nops-task\\src\\common\\Alert.js":"11","O:\\nopsTest\\nops-task\\src\\api\\api.js":"12","O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js":"13","O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js":"14","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js":"15","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js":"16","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js":"17"},{"size":271,"mtime":1612210438096,"results":"18","hashOfConfig":"19"},{"size":3673,"mtime":1611782221298,"results":"20","hashOfConfig":"19"},{"size":184,"mtime":1609186520093,"results":"21","hashOfConfig":"19"},{"size":1574,"mtime":1609187377783,"results":"22","hashOfConfig":"19"},{"size":1671,"mtime":1611101078513,"results":"23","hashOfConfig":"19"},{"size":723,"mtime":1612388762919,"results":"24","hashOfConfig":"19"},{"size":843,"mtime":1609186805342,"results":"25","hashOfConfig":"19"},{"size":3758,"mtime":1609187785604,"results":"26","hashOfConfig":"19"},{"size":2762,"mtime":1609187767556,"results":"27","hashOfConfig":"19"},{"size":1325,"mtime":1609187527222,"results":"28","hashOfConfig":"19"},{"size":528,"mtime":1609802107108,"results":"29","hashOfConfig":"19"},{"size":2241,"mtime":1611170025002,"results":"30","hashOfConfig":"19"},{"size":285,"mtime":1610398892732,"results":"31","hashOfConfig":"19"},{"size":1046,"mtime":1610399065799,"results":"32","hashOfConfig":"19"},{"size":8113,"mtime":1612393219918,"results":"33","hashOfConfig":"19"},{"size":5332,"mtime":1612387610466,"results":"34","hashOfConfig":"19"},{"size":2663,"mtime":1612387734506,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wdbcf1",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},"O:\\nopsTest\\nops-task\\src\\index.js",[],["73","74"],"O:\\nopsTest\\nops-task\\src\\App.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js",[],"O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js",[],"O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js",[],"O:\\nopsTest\\nops-task\\src\\common\\Alert.js",[],"O:\\nopsTest\\nops-task\\src\\api\\api.js",[],"O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js",[],"O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js",[],"O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js",["75","76","77","78"],"O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js",["79"],"import React, { useState, useEffect, useContext, useRef, useCallback } from \"react\";\r\nimport nopsTaskApi from \"../api/api\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\n\r\nfunction CountryList({ \r\n  countryCodes, \r\n  loadedIndex, \r\n  setLoadedIndex, \r\n  addFavoriteCode, \r\n  removeFavoriteCode, \r\n  isOnlyEven,\r\n  setCode,\r\n}) {\r\n  const [userFavoriteCodes, setUserFavoriteCodes] = useState(null);\r\n  const [userEvenFavoriteCodes, setUserEvenFavoriteCodes] = useState(null);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [triggerRerender, setTriggerRerender] = useState(false);\r\n\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  const observer = useRef();\r\n\r\n  const lastCodeElementRef = useCallback(node => {\r\n    if (!infoLoaded) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting) {\r\n        setLoadedIndex();\r\n      }\r\n    });\r\n    if (node) observer.current.observe(node);\r\n  }, [infoLoaded, setLoadedIndex]);\r\n\r\n  const urlParam = useParams();\r\n\r\n  // fetch user's favorites every time the url parameter switches from a -> b\r\n  // or from b -> a. Not ideal but only fetching on first load doesn't work.\r\n  useEffect(function loadUserFavorites() {\r\n    async function getUserFavorites() {\r\n      try {\r\n        const userFavoritesResult = await nopsTaskApi.getFavorites(currentUser.username);\r\n        setUserFavoriteCodes(userFavoritesResult.map(code => code[\"alpha3Code\"]));\r\n\r\n        const evenFavoriteCodes = userFavoritesResult.filter(\r\n          (country, index) => index % 2 === 1\r\n        );\r\n        setUserEvenFavoriteCodes(evenFavoriteCodes);\r\n      } catch (err) {\r\n        console.error(\"CountryList Modal loadUserFavorites: problem loading\", err);\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    setInfoLoaded(false);\r\n    getUserFavorites();\r\n  }, [urlParam.modal, triggerRerender, currentUser.username]);\r\n\r\n  function handleAddFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    addFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleRemoveFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    removeFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleSetCodeForDetail(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    setCode(countryCode);\r\n  }\r\n\r\n  function renderCodes() {\r\n    console.log(\"CountryList recieved\", countryCodes);\r\n    let codesToRender;\r\n    if (infoLoaded) {\r\n      if (countryCodes[0] === \"favorites\") {\r\n        if (isOnlyEven) {\r\n          codesToRender = userEvenFavoriteCodes\r\n            .slice(0, loadedIndex)\r\n            .map(country => country['alpha3Code']);\r\n        } else {\r\n          codesToRender = userFavoriteCodes.slice(0, loadedIndex);\r\n        }\r\n        if (countryCodes[1]) {\r\n          codesToRender = codesToRender.filter(code => {\r\n            if (code.toLowerCase().includes(countryCodes[1].toLowerCase())) {\r\n              return code;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        codesToRender = countryCodes\r\n          .slice(0, loadedIndex)\r\n          .map(country => country['alpha3Code']);\r\n      }\r\n\r\n      return codesToRender.map((code, index) => {\r\n        if ((index + 1) === loadedIndex) {\r\n          return (\r\n            <li key={code} ref={lastCodeElementRef} >\r\n              {userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"fas fa-star\"\r\n                  onClick={handleRemoveFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              {!userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"far fa-star\"\r\n                  onClick={handleAddFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-link\"\r\n                name={code}\r\n                onClick={handleSetCodeForDetail}\r\n              >\r\n                {code}\r\n              </button>\r\n            </li> \r\n          )\r\n        } else {\r\n          return (\r\n            <li key={code} >\r\n              {userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"fas fa-star\"\r\n                  onClick={handleRemoveFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              {!userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"far fa-star\"\r\n                  onClick={handleAddFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-link\"\r\n                name={code}\r\n                onClick={handleSetCodeForDetail}\r\n              >\r\n                {code}\r\n              </button>\r\n            </li> \r\n          )\r\n        }\r\n      }\r\n      );\r\n    } else {\r\n      return <LoadingSpinner />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul data-testid=\"country-list\">\r\n        {renderCodes()}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryList;","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js",["80"],"import React, { useState, useEffect } from \"react\";\r\nimport Modal from 'react-modal';\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\nimport axios from \"axios\";\r\n\r\n// binding modal to appElement for screen readers\r\n// Modal.setAppElement('#root');\r\n\r\nfunction CountryDetailModal({ code, setCode }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [codeDetail, setCodeDetail] = useState(null);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n\r\n  useEffect(function loadCountryDetail() {\r\n    async function getCountryDetail() {\r\n      try {\r\n        const countryCodesDetailResult = await axios.get(\r\n          `https://restcountries.eu/rest/v2/alpha/${code}`);\r\n        setCodeDetail(countryCodesDetailResult.data);\r\n      } catch (err) {\r\n        console.error(\"CountryDetailModal getCountryDetail: problem loading\", err);\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    setInfoLoaded(false);\r\n    getCountryDetail();\r\n  }, []);\r\n\r\n  function closeModals() {\r\n    setCode(null);\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={isOpen}\r\n        name=\"country-code-detail-modal\"\r\n        className=\"detail-modal\"\r\n        onRequestClose={closeModals}\r\n      >\r\n        <h2>Modal C: Details on {code}</h2>\r\n        <button onClick={closeModals}>Close</button>\r\n        {infoLoaded && \r\n          <div>\r\n            <p>\r\n              Country Name: {codeDetail.name}\r\n            </p>\r\n            <p>\r\n              Capital: {codeDetail.capital}\r\n            </p>\r\n            <p>\r\n              Region: {codeDetail.region}\r\n            </p>\r\n            <p>\r\n              Sub Region: {codeDetail.subregion}\r\n            </p>\r\n            <p>\r\n              Population: {codeDetail.population}\r\n            </p>\r\n            {codeDetail.timezones[0] && \r\n              <div>\r\n                Timezones: \r\n                <ul>\r\n                  {codeDetail.timezones.map(timezone => \r\n                    <li key={timezone} >{timezone}</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            }\r\n            {codeDetail.borders[0] && \r\n              <div>\r\n                Borders:\r\n                <ul>\r\n                  {codeDetail.borders.map(border => \r\n                    <li key={border} >{border}</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            }\r\n            Flag:\r\n            <div>\r\n              <img src={codeDetail.flag} alt=\"flag\" width=\"200\" />\r\n            </div>\r\n          </div>\r\n        }\r\n        {!infoLoaded && <LoadingSpinner />}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailModal;",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":27,"column":10,"nodeType":"87","messageId":"88","endLine":27,"endColumn":17},{"ruleId":"85","severity":1,"message":"89","line":27,"column":19,"nodeType":"87","messageId":"88","endLine":27,"endColumn":29},{"ruleId":"90","severity":1,"message":"91","line":123,"column":56,"nodeType":"92","messageId":"93","endLine":123,"endColumn":58},{"ruleId":"90","severity":1,"message":"91","line":139,"column":55,"nodeType":"92","messageId":"93","endLine":139,"endColumn":57},{"ruleId":"90","severity":1,"message":"91","line":90,"column":53,"nodeType":"92","messageId":"93","endLine":90,"endColumn":55},{"ruleId":"94","severity":1,"message":"95","line":28,"column":6,"nodeType":"96","endLine":28,"endColumn":8,"suggestions":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'modalId' is assigned a value but never used.","Identifier","unusedVar","'setModalId' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'code'. Either include it or remove the dependency array.","ArrayExpression",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [code]",{"range":"103","text":"104"},[958,960],"[code]"]