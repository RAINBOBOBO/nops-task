[{"O:\\nopsTest\\nops-task\\src\\index.js":"1","O:\\nopsTest\\nops-task\\src\\App.js":"2","O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js":"3","O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js":"4","O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js":"5","O:\\nopsTest\\nops-task\\src\\api\\api.js":"6","O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js":"7","O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js":"8","O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js":"9","O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js":"10","O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js":"11","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js":"12","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js":"13","O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js":"14","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js":"15","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js":"16","O:\\nopsTest\\nops-task\\src\\common\\Alert.js":"17"},{"size":271,"mtime":1612210438096,"results":"18","hashOfConfig":"19"},{"size":3716,"mtime":1614111781221,"results":"20","hashOfConfig":"19"},{"size":184,"mtime":1609186520093,"results":"21","hashOfConfig":"19"},{"size":1896,"mtime":1614208374585,"results":"22","hashOfConfig":"19"},{"size":1671,"mtime":1611101078513,"results":"23","hashOfConfig":"19"},{"size":2275,"mtime":1612827669845,"results":"24","hashOfConfig":"19"},{"size":285,"mtime":1610398892732,"results":"25","hashOfConfig":"19"},{"size":1046,"mtime":1610399065799,"results":"26","hashOfConfig":"19"},{"size":843,"mtime":1609186805342,"results":"27","hashOfConfig":"19"},{"size":2583,"mtime":1614205990715,"results":"28","hashOfConfig":"19"},{"size":3343,"mtime":1614200649085,"results":"29","hashOfConfig":"19"},{"size":10367,"mtime":1614208566267,"results":"30","hashOfConfig":"19"},{"size":1399,"mtime":1614116704780,"results":"31","hashOfConfig":"19"},{"size":1396,"mtime":1614208487345,"results":"32","hashOfConfig":"19"},{"size":3357,"mtime":1614196525450,"results":"33","hashOfConfig":"19"},{"size":7284,"mtime":1614122038803,"results":"34","hashOfConfig":"19"},{"size":528,"mtime":1609802107108,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wcfyg",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"O:\\nopsTest\\nops-task\\src\\index.js",[],["72","73"],"O:\\nopsTest\\nops-task\\src\\App.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js",[],"O:\\nopsTest\\nops-task\\src\\api\\api.js",[],"O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js",[],"O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js",[],"O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js",["74","75"],"O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js",[],"O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js",[],"O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js",["76"],"O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js",["77"],"import React, { useState, useEffect, useContext, useRef, useCallback } from \"react\";\r\nimport nopsTaskApi from \"../api/api\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\nimport { Button, Container, List } from \"semantic-ui-react\";\r\n\r\n/** CountryList\r\n * \r\n *  Renders a generic list of country codes and makes a request to the backend \r\n *  API for user favorites.\r\n * \r\n *  Props:\r\n *    - countryCodes: array of codes to render. If loading favorites, array will \r\n *        only have [\"favorites\", searchTerm] and component will make request to\r\n *        backend API for the list of codes.\r\n *    - loadedIndex: int amount of codes to render\r\n *    - setLoadedIndex: fn used to change the number of codes to render when \r\n *        reaching the bottom of the page.\r\n *    - addFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the add favorite button is pressed.\r\n *    - removeFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the remove favorite button is pressed.\r\n *    - isOnlyEven: boolean to determine whether or not component will render\r\n *        only the even indexed codes.\r\n *    - setCode: fn passed from CountryCodeModal to know which code to get \r\n *        details for when a code is clicked on.\r\n * \r\n *  State:\r\n *    - userFavoriteCodes: array to keep track of the user's favorite codes when\r\n *        a request is made to the backend API.\r\n *    - userEvenFavoriteCodes: array to keep track of the even numbered indexes\r\n *        of the user's favorite codes.\r\n *    - infoLoaded: boolean to know when to show a loading message or when to\r\n *        render the list of country codes.\r\n *    - triggerRerender: boolean to know when to re-render the list. I used this\r\n *        solution because the page wouldn't show when a favorite was added \r\n *        unless I re-rendered the page. Not the cleanest solution but it works\r\n *        for now. In a real world application I would ask for help on this.\r\n * \r\n *  CountryCodeModal --> CountryList\r\n */\r\n\r\nfunction CountryList({ \r\n  countryCodes, \r\n  loadedIndex, \r\n  setLoadedIndex, \r\n  addFavoriteCode, \r\n  removeFavoriteCode, \r\n  isOnlyEven,\r\n  setCode,\r\n}) {\r\n  const [userFavoriteCodes, setUserFavoriteCodes] = useState(null);\r\n  const [userEvenFavoriteCodes, setUserEvenFavoriteCodes] = useState(null);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [triggerRerender, setTriggerRerender] = useState(false);\r\n\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  const observer = useRef();\r\n\r\n  const lastCodeElementRef = useCallback(node => {\r\n    if (!infoLoaded) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting) {\r\n        setLoadedIndex();\r\n      }\r\n    });\r\n    if (node) observer.current.observe(node);\r\n  }, [infoLoaded, setLoadedIndex]);\r\n\r\n  const urlParam = useParams();\r\n\r\n  // fetch user's favorites every time the url parameter switches from a -> b\r\n  // or from b -> a. Not ideal but only fetching on first load doesn't work.\r\n  useEffect(function loadUserFavorites() {\r\n    async function getUserFavorites() {\r\n      try {\r\n        const userFavoritesResult = await nopsTaskApi.getFavorites(currentUser.username);\r\n        setUserFavoriteCodes(userFavoritesResult.map(code => code[\"alpha3Code\"]));\r\n\r\n        const evenFavoriteCodes = userFavoritesResult.filter(\r\n          (country, index) => index % 2 === 1\r\n        );\r\n        setUserEvenFavoriteCodes(evenFavoriteCodes);\r\n      } catch (err) {\r\n        console.error(\"CountryList Modal loadUserFavorites: problem loading\", err);\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    setInfoLoaded(false);\r\n    getUserFavorites();\r\n  }, [urlParam.modal, triggerRerender, currentUser.username]);\r\n\r\n  function handleAddFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    addFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleRemoveFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    removeFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleSetCodeForDetail(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    setCode(countryCode);\r\n  }\r\n\r\n  function renderCodes() {\r\n    console.log(\"CountryList recieved\", countryCodes);\r\n    let codesToRender;\r\n    if (infoLoaded) {\r\n      if (countryCodes[0] === \"favorites\") {\r\n        if (isOnlyEven) {\r\n          codesToRender = userEvenFavoriteCodes\r\n            .slice(0, loadedIndex)\r\n            .map(country => country['alpha3Code']);\r\n        } else {\r\n          codesToRender = userFavoriteCodes.slice(0, loadedIndex);\r\n        }\r\n        if (countryCodes[1]) {\r\n          codesToRender = codesToRender.filter(code => {\r\n            if (code.toLowerCase().includes(countryCodes[1].toLowerCase())) {\r\n              return code;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        codesToRender = countryCodes\r\n          .slice(0, loadedIndex)\r\n          .map(country => country['alpha3Code']);\r\n      }\r\n\r\n      return codesToRender.map((code, index) => {\r\n        if ((index + 1) === loadedIndex) {\r\n          return (\r\n            <div ref={lastCodeElementRef}>\r\n              <List.Item key={code}>\r\n                {userFavoriteCodes.includes(code) && \r\n                  <i \r\n                    className=\"fas fa-star\"\r\n                    onClick={handleRemoveFavoriteCode}\r\n                    name={code}\r\n                  />}\r\n                {!userFavoriteCodes.includes(code) && \r\n                  <i \r\n                    className=\"far fa-star\"\r\n                    onClick={handleAddFavoriteCode}\r\n                    name={code}\r\n                  />}\r\n                <Button\r\n                  name={code}\r\n                  onClick={handleSetCodeForDetail}\r\n                  size=\"tiny\"\r\n                  color=\"black\"\r\n                >\r\n                  {code}\r\n                </Button>\r\n              </List.Item>\r\n            </div>\r\n          )\r\n        } else {\r\n          return (\r\n            <List.Item key={code}>\r\n              {userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"fas fa-star\"\r\n                  onClick={handleRemoveFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              {!userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"far fa-star\"\r\n                  onClick={handleAddFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              <Button\r\n                name={code}\r\n                onClick={handleSetCodeForDetail}\r\n                size=\"tiny\"\r\n                color=\"black\"\r\n              >\r\n                {code}\r\n              </Button>\r\n            </List.Item>\r\n          )\r\n        }\r\n      }\r\n      );\r\n    } else {\r\n      return <LoadingSpinner />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <List>\r\n        {renderCodes()}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CountryList;","O:\\nopsTest\\nops-task\\src\\common\\Alert.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":154,"column":56,"nodeType":"84","messageId":"85","endLine":154,"endColumn":58},{"ruleId":"82","severity":1,"message":"83","line":170,"column":55,"nodeType":"84","messageId":"85","endLine":170,"endColumn":57},{"ruleId":"86","severity":1,"message":"87","line":44,"column":6,"nodeType":"88","endLine":44,"endColumn":8,"suggestions":"89"},{"ruleId":"82","severity":1,"message":"83","line":127,"column":53,"nodeType":"84","messageId":"85","endLine":127,"endColumn":55},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'code'. Either include it or remove the dependency array.","ArrayExpression",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [code]",{"range":"95","text":"96"},[1519,1521],"[code]"]