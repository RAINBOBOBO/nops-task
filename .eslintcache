[{"O:\\nopsTest\\nops-task\\src\\index.js":"1","O:\\nopsTest\\nops-task\\src\\App.js":"2","O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js":"3","O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js":"4","O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js":"5","O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js":"6","O:\\nopsTest\\nops-task\\src\\api\\api.js":"7","O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js":"8","O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js":"9","O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js":"10","O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js":"11","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js":"12","O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js":"13","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js":"14","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js":"15","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js":"16","O:\\nopsTest\\nops-task\\src\\common\\Alert.js":"17"},{"size":271,"mtime":1612210438096,"results":"18","hashOfConfig":"19"},{"size":3716,"mtime":1614111781221,"results":"20","hashOfConfig":"19"},{"size":1896,"mtime":1614208374585,"results":"21","hashOfConfig":"19"},{"size":184,"mtime":1609186520093,"results":"22","hashOfConfig":"19"},{"size":1671,"mtime":1611101078513,"results":"23","hashOfConfig":"19"},{"size":285,"mtime":1610398892732,"results":"24","hashOfConfig":"19"},{"size":2435,"mtime":1614726265847,"results":"25","hashOfConfig":"19"},{"size":1046,"mtime":1610399065799,"results":"26","hashOfConfig":"19"},{"size":2781,"mtime":1614295950541,"results":"27","hashOfConfig":"19"},{"size":4377,"mtime":1614726162358,"results":"28","hashOfConfig":"19"},{"size":843,"mtime":1609186805342,"results":"29","hashOfConfig":"19"},{"size":1399,"mtime":1614298283682,"results":"30","hashOfConfig":"19"},{"size":1396,"mtime":1614291778625,"results":"31","hashOfConfig":"19"},{"size":10367,"mtime":1614298307965,"results":"32","hashOfConfig":"19"},{"size":7284,"mtime":1614294406589,"results":"33","hashOfConfig":"19"},{"size":3357,"mtime":1614196525450,"results":"34","hashOfConfig":"19"},{"size":528,"mtime":1609802107108,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1wm9g39",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"O:\\nopsTest\\nops-task\\src\\index.js",[],["74","75"],"O:\\nopsTest\\nops-task\\src\\App.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Navigation.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\UserContext.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\Routes.js",[],"O:\\nopsTest\\nops-task\\src\\common\\LoadingSpinner.js",[],"O:\\nopsTest\\nops-task\\src\\api\\api.js",[],"O:\\nopsTest\\nops-task\\src\\hooks\\useLocalStorage.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\LoginForm.js",[],"O:\\nopsTest\\nops-task\\src\\auth\\SignupForm.js",[],"O:\\nopsTest\\nops-task\\src\\routes-nav\\PrivateRoute.js",[],"O:\\nopsTest\\nops-task\\src\\country-codes\\CountryCodes.js",[],"O:\\nopsTest\\nops-task\\src\\homepage\\Homepage.js",[],"O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryCodeModal.js",["76","77"],"import \"./CountryCodeModal.css\"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport CountryList from \"../country-codes/CountryList.js\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\nimport CountryDetailModal from \"./CountryDetailModal.js\";\r\nimport { Modal, Container, Button, Divider, Form, Segment, Header } from \"semantic-ui-react\";\r\n\r\n// binding modal to appElement for screen readers\r\n\r\nconst countryCodeAPI = \"https://restcountries.eu/rest/v2\"\r\n\r\n\r\n/** CountryCodeModal\r\n * \r\n *  Makes country code API requests for country code data and holds necessary \r\n *  data for other components to be rendered.\r\n * \r\n *  Props:\r\n *    - addFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the add favorite button is pressed.\r\n *    - removeFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the remove favorite button is pressed.\r\n * \r\n *  State:\r\n *    - isOnlyEven: boolean to determine whether or not component will render\r\n *        only the even indexed codes.\r\n *    - isOpen: boolean to determine whether or not the modal should be open,\r\n *        required for the Modal component\r\n *    - infoLoaded: boolean to know when to show a loading message or when to\r\n *        render the list of country codes.\r\n *    - loadedIndex: int amount of codes to render\r\n *    - allCountryCodes: array of codes to render\r\n *    - evenCountryCodes: array to keep track of the even numbered indexes of \r\n *        the country codes gotten from country code API.\r\n *    - codeToGetDetail: string to send to CountryDetailModal so it knows what\r\n *        country to get details on.\r\n *    - searchedCode: array to hold searched country data w/ country code API\r\n *    - formData: object to handle the search box changes.\r\n * \r\n *  Routed at /codes/:modal where :modal is \"a\" or \"b\"\r\n * \r\n *  Routes --> CountryCodeModal --> {CountryList, CountryDetailModal}\r\n */\r\n\r\nfunction CountryCodeModal({ addFavoriteCode, removeFavoriteCode }) {\r\n  const history = useHistory();\r\n\r\n  const [isOnlyEven, setIsOnlyEven] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [loadedIndex, setLoadedIndex] = useState(10);\r\n  const [allCountryCodes, setAllCountryCodes] = useState(null);\r\n  const [evenCountryCodes, setEvenCountryCodes] = useState(null);\r\n  const [codeToGetDetail, setCodeToGetDetail] = useState(null);\r\n  const [searchedCode, setSearchedCode] = useState(null);\r\n  const [formData, setFormData] = useState({ filterResults: \"\"});\r\n\r\n  const urlParam = useParams();\r\n\r\n  useEffect(function loadCountryInfo() {\r\n    console.debug(\"CountryCodeModal useEffect loadCountryInfo\");\r\n\r\n    async function getCountryCodes() {\r\n      try {\r\n        const allCountryCodesResult = await axios.get(\r\n          `${countryCodeAPI}/all?fields=name;alpha3Code`);\r\n        setAllCountryCodes(allCountryCodesResult.data.slice(0, loadedIndex));\r\n\r\n        const evenCountryCodesResult = allCountryCodesResult.data.filter(\r\n          (country, index) => index % 2 === 1\r\n        );\r\n        setEvenCountryCodes(evenCountryCodesResult);\r\n      } catch (err) {\r\n        console.error(\"CountryCodeModal loadCountryInfo: problem loading\", err);\r\n      }\r\n      console.log(\"got country codes in useEffect.\")\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    // set infoLoaded to false while async getCountryCodes runs; once the\r\n    // data is fetched (or even if an error happens!), this will be set back\r\n    // to false to control the spinner.\r\n    setInfoLoaded(false);\r\n    getCountryCodes();\r\n  }, [loadedIndex]);\r\n\r\n  useEffect(function searchByCode() {\r\n    console.debug(\"CountryCodeModal useEffect searchByCode\");\r\n    if (formData.filterResults.length > 1) {\r\n      async function getCountryCode() {\r\n        try {\r\n          const searchResult = await axios.get(\r\n            `${countryCodeAPI}/alpha?codes=${formData.filterResults}`);\r\n          setSearchedCode(searchResult.data);\r\n        } catch (err) {\r\n          if (err.message === \"Request failed with status code 404\") {\r\n            setSearchedCode(null);\r\n          } else {\r\n            console.error(\"CountryCodeModal searchCountryCodes: problem loading\", err);\r\n          }\r\n        }\r\n        setInfoLoaded(true);\r\n      }\r\n      setInfoLoaded(false);\r\n      getCountryCode();\r\n    }\r\n  }, [formData.filterResults]);\r\n\r\n  function openModalA () {\r\n    history.push(\"/codes/a\");\r\n  }\r\n\r\n  function openModalB () {\r\n    history.push(\"/codes/b\");\r\n  }\r\n\r\n  // redirect to /codes on modal close\r\n  function closeModals() {\r\n    setIsOpen(false);\r\n    history.push(\"/codes\");\r\n  }\r\n\r\n  function handleCheckboxChange(evt) {\r\n    setIsOnlyEven(value => !value);\r\n  }\r\n\r\n  function handleSearchboxChange(evt) {\r\n    const { name, value } = evt.target;\r\n    setFormData(data => ({ ...data, [name]: value }));\r\n  }\r\n\r\n  function handleSetCodeForDetail(code) {\r\n    setCodeToGetDetail(code);\r\n  }\r\n\r\n  function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n  }\r\n\r\n  function increaseLoadedIndex() {\r\n    setLoadedIndex(prevLoadedIndex => prevLoadedIndex + 10);\r\n  }\r\n\r\n  function displayCountryCodes() {\r\n    // render CountryList once info is loaded, pass allCountryCodes based on\r\n    // url param\r\n    if (infoLoaded) {\r\n      if (urlParam.modal === 'a') {\r\n        let codesToSend;\r\n        if (isOnlyEven) {\r\n          if (formData.filterResults) {\r\n            codesToSend = evenCountryCodes.filter(code => {\r\n              if (code['alpha3Code'].toLowerCase().includes(formData.filterResults.toLowerCase())) {\r\n                return code;\r\n              }\r\n            });\r\n            if (codesToSend.length === 0 \r\n                && formData.filterResults.length === 3 \r\n                && searchedCode !== null \r\n                && searchedCode[0] !== null) {\r\n              codesToSend = searchedCode;\r\n            }\r\n          } else {\r\n            codesToSend = evenCountryCodes;\r\n          }\r\n        } else {\r\n          if (formData.filterResults) {\r\n            codesToSend = allCountryCodes.filter(code => {\r\n              if (code['alpha3Code'].toLowerCase().includes(formData.filterResults.toLowerCase())) {\r\n                return code;\r\n              }\r\n            });\r\n            if (codesToSend.length === 0 \r\n                && formData.filterResults.length > 1 \r\n                && searchedCode !== null \r\n                && searchedCode[0] !== null) {\r\n              codesToSend = searchedCode;\r\n            }\r\n          } else {\r\n            codesToSend = allCountryCodes;\r\n          }\r\n        }\r\n        return (\r\n          <CountryList \r\n            countryCodes={codesToSend} \r\n            loadedIndex={loadedIndex}\r\n            setLoadedIndex={increaseLoadedIndex}\r\n            addFavoriteCode={addFavoriteCode}\r\n            removeFavoriteCode={removeFavoriteCode}\r\n            isOnlyEven={isOnlyEven}\r\n            setCode={handleSetCodeForDetail}\r\n            data-testid=\"modal-a\"\r\n        />);\r\n      } else if (urlParam.modal === 'b') {\r\n        const userFavoriteCodes = [\"favorites\", formData.filterResults];\r\n        return (\r\n          <CountryList \r\n              countryCodes={userFavoriteCodes} \r\n              loadedIndex={loadedIndex}\r\n              setLoadedIndex={increaseLoadedIndex}\r\n              addFavoriteCode={addFavoriteCode}\r\n              removeFavoriteCode={removeFavoriteCode}\r\n              isOnlyEven={isOnlyEven}\r\n              setCode={handleSetCodeForDetail}\r\n              data-testid=\"modal-b\"\r\n          />);\r\n      }\r\n    } else {\r\n      return <LoadingSpinner />;\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <Container>\r\n\r\n      {codeToGetDetail && \r\n        <CountryDetailModal \r\n          code={codeToGetDetail}\r\n          setCode={setCodeToGetDetail}\r\n        />\r\n      }\r\n      <Modal\r\n        open={isOpen}\r\n        onClose={closeModals}\r\n      >\r\n        <div className={\"country-code-modal-\" + urlParam.modal} >\r\n          <Modal.Header \r\n            id=\"country-code-modal-header\"\r\n            as=\"h2\"\r\n          > \r\n            Modal {urlParam.modal?.toUpperCase()}: \r\n             {urlParam.modal === \"a\" ? \" All Codes\" : \" Favorite Codes\"}\r\n          </Modal.Header>\r\n\r\n          <Container id=\"country-code-modal-button-container\">\r\n            <Button \r\n              onClick={openModalA} \r\n              className=\"buttonA\" \r\n              data-testid=\"modal-button-a\"\r\n              color=\"violet\"\r\n            >All country codes</Button>\r\n            <Button \r\n              onClick={openModalB} \r\n              className=\"buttonB\" \r\n              data-testid=\"modal-button-b\"\r\n              color=\"orange\"\r\n            >Favorite country codes</Button>\r\n            <Button \r\n              onClick={closeModals} \r\n              className=\"buttonC\"\r\n              data-testid=\"modal-button-close\"\r\n              color=\"black\"\r\n            >\r\n              Close\r\n            </Button>\r\n          </Container>\r\n          <Divider />\r\n          <Segment basic padded=\"very\" id={\"country-code-modal-form-segment-\" + urlParam.modal}>\r\n            <Header>\r\n              Filter codes\r\n            </Header>\r\n            <Divider />\r\n            <Form onSubmit={handleSubmit}>\r\n              <Form.Group>\r\n                <Form.Field width={4}>\r\n                  <label>Search by code</label>\r\n                  <input\r\n                    name=\"filterResults\"\r\n                    className=\"form-control\"\r\n                    value={formData.filterResults}\r\n                    onChange={handleSearchboxChange}\r\n                  />\r\n                </Form.Field>\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Checkbox \r\n                  label=\"Only Even\"\r\n                  name=\"onlyEven\"\r\n                  onChange={handleCheckboxChange}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Segment>\r\n          <Segment padded=\"very\" id={\"country-code-list-segment-\" + urlParam.modal}>\r\n            {displayCountryCodes()}\r\n            <Divider />\r\n            {infoLoaded && <i>( You've reached the end of the list! )</i>}\r\n          </Segment>\r\n        </div>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CountryCodeModal;","O:\\nopsTest\\nops-task\\src\\country-codes\\CountryList.js",["78"],"import React, { useState, useEffect, useContext, useRef, useCallback } from \"react\";\r\nimport nopsTaskApi from \"../api/api\";\r\nimport UserContext from \"../auth/UserContext\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\nimport { Button, Container, List } from \"semantic-ui-react\";\r\n\r\n/** CountryList\r\n * \r\n *  Renders a generic list of country codes and makes a request to the backend \r\n *  API for user favorites.\r\n * \r\n *  Props:\r\n *    - countryCodes: array of codes to render. If loading favorites, array will \r\n *        only have [\"favorites\", searchTerm] and component will make request to\r\n *        backend API for the list of codes.\r\n *    - loadedIndex: int amount of codes to render\r\n *    - setLoadedIndex: fn used to change the number of codes to render when \r\n *        reaching the bottom of the page.\r\n *    - addFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the add favorite button is pressed.\r\n *    - removeFavoriteCode: fn passed from app to send code data to backend API \r\n *        whenever the remove favorite button is pressed.\r\n *    - isOnlyEven: boolean to determine whether or not component will render\r\n *        only the even indexed codes.\r\n *    - setCode: fn passed from CountryCodeModal to know which code to get \r\n *        details for when a code is clicked on.\r\n * \r\n *  State:\r\n *    - userFavoriteCodes: array to keep track of the user's favorite codes when\r\n *        a request is made to the backend API.\r\n *    - userEvenFavoriteCodes: array to keep track of the even numbered indexes\r\n *        of the user's favorite codes.\r\n *    - infoLoaded: boolean to know when to show a loading message or when to\r\n *        render the list of country codes.\r\n *    - triggerRerender: boolean to know when to re-render the list. I used this\r\n *        solution because the page wouldn't show when a favorite was added \r\n *        unless I re-rendered the page. Not the cleanest solution but it works\r\n *        for now. In a real world application I would ask for help on this.\r\n * \r\n *  CountryCodeModal --> CountryList\r\n */\r\n\r\nfunction CountryList({ \r\n  countryCodes, \r\n  loadedIndex, \r\n  setLoadedIndex, \r\n  addFavoriteCode, \r\n  removeFavoriteCode, \r\n  isOnlyEven,\r\n  setCode,\r\n}) {\r\n  const [userFavoriteCodes, setUserFavoriteCodes] = useState(null);\r\n  const [userEvenFavoriteCodes, setUserEvenFavoriteCodes] = useState(null);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n  const [triggerRerender, setTriggerRerender] = useState(false);\r\n\r\n  const { currentUser } = useContext(UserContext);\r\n\r\n  const observer = useRef();\r\n\r\n  const lastCodeElementRef = useCallback(node => {\r\n    if (!infoLoaded) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting) {\r\n        setLoadedIndex();\r\n      }\r\n    });\r\n    if (node) observer.current.observe(node);\r\n  }, [infoLoaded, setLoadedIndex]);\r\n\r\n  const urlParam = useParams();\r\n\r\n  // fetch user's favorites every time the url parameter switches from a -> b\r\n  // or from b -> a. Not ideal but only fetching on first load doesn't work.\r\n  useEffect(function loadUserFavorites() {\r\n    async function getUserFavorites() {\r\n      try {\r\n        const userFavoritesResult = await nopsTaskApi.getFavorites(currentUser.username);\r\n        setUserFavoriteCodes(userFavoritesResult.map(code => code[\"alpha3Code\"]));\r\n\r\n        const evenFavoriteCodes = userFavoritesResult.filter(\r\n          (country, index) => index % 2 === 1\r\n        );\r\n        setUserEvenFavoriteCodes(evenFavoriteCodes);\r\n      } catch (err) {\r\n        console.error(\"CountryList Modal loadUserFavorites: problem loading\", err);\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    setInfoLoaded(false);\r\n    getUserFavorites();\r\n  }, [urlParam.modal, triggerRerender, currentUser.username]);\r\n\r\n  function handleAddFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    addFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleRemoveFavoriteCode(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    removeFavoriteCode(countryCode);\r\n    setTriggerRerender(state => !state);\r\n  }\r\n\r\n  function handleSetCodeForDetail(evt) {\r\n    const countryCode = evt.target.getAttribute('name');\r\n    setCode(countryCode);\r\n  }\r\n\r\n  function renderCodes() {\r\n    console.log(\"CountryList recieved\", countryCodes);\r\n    let codesToRender;\r\n    if (infoLoaded) {\r\n      if (countryCodes[0] === \"favorites\") {\r\n        if (isOnlyEven) {\r\n          codesToRender = userEvenFavoriteCodes\r\n            .slice(0, loadedIndex)\r\n            .map(country => country['alpha3Code']);\r\n        } else {\r\n          codesToRender = userFavoriteCodes.slice(0, loadedIndex);\r\n        }\r\n        if (countryCodes[1]) {\r\n          codesToRender = codesToRender.filter(code => {\r\n            if (code.toLowerCase().includes(countryCodes[1].toLowerCase())) {\r\n              return code;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        codesToRender = countryCodes\r\n          .slice(0, loadedIndex)\r\n          .map(country => country['alpha3Code']);\r\n      }\r\n\r\n      return codesToRender.map((code, index) => {\r\n        if ((index + 1) === loadedIndex) {\r\n          return (\r\n            <div ref={lastCodeElementRef}>\r\n              <List.Item key={code}>\r\n                {userFavoriteCodes.includes(code) && \r\n                  <i \r\n                    className=\"fas fa-star\"\r\n                    onClick={handleRemoveFavoriteCode}\r\n                    name={code}\r\n                  />}\r\n                {!userFavoriteCodes.includes(code) && \r\n                  <i \r\n                    className=\"far fa-star\"\r\n                    onClick={handleAddFavoriteCode}\r\n                    name={code}\r\n                  />}\r\n                <Button\r\n                  name={code}\r\n                  onClick={handleSetCodeForDetail}\r\n                  size=\"tiny\"\r\n                  color=\"black\"\r\n                >\r\n                  {code}\r\n                </Button>\r\n              </List.Item>\r\n            </div>\r\n          )\r\n        } else {\r\n          return (\r\n            <List.Item key={code}>\r\n              {userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"fas fa-star\"\r\n                  onClick={handleRemoveFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              {!userFavoriteCodes.includes(code) && \r\n                <i \r\n                  className=\"far fa-star\"\r\n                  onClick={handleAddFavoriteCode}\r\n                  name={code}\r\n                />}\r\n              <Button\r\n                name={code}\r\n                onClick={handleSetCodeForDetail}\r\n                size=\"tiny\"\r\n                color=\"black\"\r\n              >\r\n                {code}\r\n              </Button>\r\n            </List.Item>\r\n          )\r\n        }\r\n      }\r\n      );\r\n    } else {\r\n      return <LoadingSpinner />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <List>\r\n        {renderCodes()}\r\n      </List>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CountryList;","O:\\nopsTest\\nops-task\\src\\custom-modals\\CountryDetailModal.js",["79"],"import React, { useState, useEffect } from \"react\";\r\nimport LoadingSpinner from \"../common/LoadingSpinner.js\";\r\nimport axios from \"axios\";\r\nimport { Button, Header, Image, Modal } from 'semantic-ui-react'\r\n\r\n\r\n/** CountryDetailModal\r\n * \r\n *  Renders details on a specific country\r\n * \r\n *  Props:\r\n *    - code: string to keep track of what country to get details on\r\n *    - setCode: fn to set code to null on modal close\r\n * \r\n *  State:\r\n *    - isOpen: boolean to determine whether or not the modal should be open,\r\n *        required for the Modal component\r\n *    - codeDetail: object to remember data from country code API request.\r\n *    - infoLoaded: boolean to know when to show a loading message or when to\r\n *        render the details of country code.\r\n * \r\n *  CountryCodeModal --> CountryDetailModal\r\n */\r\n\r\nfunction CountryDetailModal({ code, setCode }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [codeDetail, setCodeDetail] = useState(null);\r\n  const [infoLoaded, setInfoLoaded] = useState(false);\r\n\r\n  useEffect(function loadCountryDetail() {\r\n    async function getCountryDetail() {\r\n      try {\r\n        const countryCodesDetailResult = await axios.get(\r\n          `https://restcountries.eu/rest/v2/alpha/${code}`);\r\n        setCodeDetail(countryCodesDetailResult.data);\r\n      } catch (err) {\r\n        console.error(\"CountryDetailModal getCountryDetail: problem loading\", err);\r\n      }\r\n      setInfoLoaded(true);\r\n    }\r\n\r\n    setInfoLoaded(false);\r\n    getCountryDetail();\r\n  }, []);\r\n\r\n  function closeModals() {\r\n    setCode(null);\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      open={isOpen}\r\n      name=\"country-code-detail-modal\"\r\n      className=\"detail-modal\"\r\n      onClose={closeModals}\r\n      dimmer=\"blurring\"\r\n    >\r\n      <Modal.Header>Modal C: Details on {code}</Modal.Header>\r\n      <Modal.Content image>\r\n        {infoLoaded && \r\n          <Image src={codeDetail.flag} alt=\"flag\" size=\"large\" wrapped/>\r\n        }\r\n        {infoLoaded && \r\n          <Modal.Description>\r\n            <Header>\r\n              Country Name: {codeDetail.name}\r\n            </Header>\r\n            <p>\r\n              Capital: {codeDetail.capital}\r\n            </p>\r\n            <p>\r\n              Region: {codeDetail.region}\r\n            </p>\r\n            <p>\r\n              Sub Region: {codeDetail.subregion}\r\n            </p>\r\n            <p>\r\n              Population: {codeDetail.population}\r\n            </p>\r\n            {codeDetail.timezones[0] && \r\n              <div>\r\n                Timezones: \r\n                <ul>\r\n                  {codeDetail.timezones.map(timezone => \r\n                    <li key={timezone} >{timezone}</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            }\r\n            {codeDetail.borders[0] && \r\n              <div>\r\n                Borders:\r\n                <ul>\r\n                  {codeDetail.borders.map(border => \r\n                    <li key={border} >{border}</li>\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            }\r\n          </Modal.Description>\r\n        }\r\n        {!infoLoaded && <LoadingSpinner />}\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button color=\"black\" onClick={closeModals}>Close</Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default CountryDetailModal;","O:\\nopsTest\\nops-task\\src\\common\\Alert.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":154,"column":56,"nodeType":"86","messageId":"87","endLine":154,"endColumn":58},{"ruleId":"84","severity":1,"message":"85","line":170,"column":55,"nodeType":"86","messageId":"87","endLine":170,"endColumn":57},{"ruleId":"84","severity":1,"message":"85","line":127,"column":53,"nodeType":"86","messageId":"87","endLine":127,"endColumn":55},{"ruleId":"88","severity":1,"message":"89","line":44,"column":6,"nodeType":"90","endLine":44,"endColumn":8,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'code'. Either include it or remove the dependency array.","ArrayExpression",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [code]",{"range":"97","text":"98"},[1519,1521],"[code]"]